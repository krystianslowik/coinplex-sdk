name: CoinPlex SDK Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create .env file
      run: |
        echo "COINPLEX_API_KEY=${{ secrets.COINPLEX_API_KEY }}" >> .env
        echo "COINPLEX_API_SECRET=${{ secrets.COINPLEX_API_SECRET }}" >> .env
        echo "COINPLEX_PREFIX=${{ secrets.COINPLEX_PREFIX }}" >> .env
        echo "COINPLEX_ACCOUNT=${{ secrets.COINPLEX_ACCOUNT }}" >> .env
        echo "COINPLEX_CODE=${{ secrets.COINPLEX_CODE }}" >> .env

    - name: Run all tests with JSON output
      id: test
      run: |
        # Run tests and capture both JSON output and exit code
        npm test -- --json --outputFile=test-results.json || echo "tests_failed=true" >> $GITHUB_OUTPUT
        
        # Also run individual test suites for detailed badge data
        mkdir -p test-outputs
        
        echo "Running individual test suites..."
        
        # Test each suite individually and capture results
        for suite in wallet financial user income quantify ads; do
          echo "Testing $suite..."
          if npm test -- "tests/$suite.test.js" --json --outputFile="test-outputs/$suite.json"; then
            echo "${suite}_status=passed" >> $GITHUB_OUTPUT
          else
            echo "${suite}_status=failed" >> $GITHUB_OUTPUT
          fi
        done
      continue-on-error: true

    - name: Generate badge data
      run: |
        mkdir -p badge-data
        
        # Check if individual test results exist
        wallet_status="${{ steps.test.outputs.wallet_status }}"
        financial_status="${{ steps.test.outputs.financial_status }}"
        user_status="${{ steps.test.outputs.user_status }}"
        income_status="${{ steps.test.outputs.income_status }}"
        quantify_status="${{ steps.test.outputs.quantify_status }}"
        ads_status="${{ steps.test.outputs.ads_status }}"
        
        # Generate badges for each test suite
        for suite in wallet financial user income quantify ads; do
          # Get status for this suite
          case $suite in
            wallet) status="$wallet_status" ;;
            financial) status="$financial_status" ;;
            user) status="$user_status" ;;
            income) status="$income_status" ;;
            quantify) status="$quantify_status" ;;
            ads) status="$ads_status" ;;
          esac
          
          # Default to failed if empty
          if [ -z "$status" ]; then
            status="failed"
          fi
          
          if [ "$status" = "passed" ]; then
            color="green"
            message="passing"
          else
            color="red" 
            message="failing"
          fi
          
          echo "{\"schemaVersion\": 1, \"label\": \"$suite\", \"message\": \"$message\", \"color\": \"$color\"}" > "badge-data/$suite.json"
        done
        
        # Generate overall status badge
        passed_count=0
        total_count=6
        
        for status in "$wallet_status" "$financial_status" "$user_status" "$income_status" "$quantify_status" "$ads_status"; do
          if [ "$status" = "passed" ]; then
            passed_count=$((passed_count + 1))
          fi
        done
        
        if [ $passed_count -eq $total_count ]; then
          overall_color="green"
        elif [ $passed_count -gt 0 ]; then
          overall_color="yellow"
        else
          overall_color="red"
        fi
        
        overall_message="$passed_count/$total_count passing"
        
        echo "{\"schemaVersion\": 1, \"label\": \"tests\", \"message\": \"$overall_message\", \"color\": \"$overall_color\"}" > badge-data/overall.json

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.json
          test-outputs/
          badge-data/


  publish-badges:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    permissions:
      contents: write
      
    steps:
    - name: Checkout badges branch
      uses: actions/checkout@v4
      with:
        ref: badges
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create badges branch if it doesn't exist
      if: failure()
      run: |
        git checkout --orphan badges
        git rm -rf .
        mkdir -p badges
        echo "# Badges Branch" > README.md
        echo "This branch contains badge data for the CoinPlex SDK." >> README.md
        git add README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "Initialize badges branch"
        git push origin badges

    - name: Checkout badges branch (retry)
      if: failure()
      uses: actions/checkout@v4
      with:
        ref: badges
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download badge artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./artifacts

    - name: Update badge files
      run: |
        mkdir -p badges
        
        # Copy badge data files
        if [ -d "./artifacts/badge-data" ]; then
          cp ./artifacts/badge-data/*.json badges/
        fi
        
        # Ensure we have badge files (create defaults if missing)
        for suite in wallet financial user income quantify ads overall; do
          if [ ! -f "badges/$suite.json" ]; then
            echo "{\"schemaVersion\": 1, \"label\": \"$suite\", \"message\": \"unknown\", \"color\": \"lightgrey\"}" > "badges/$suite.json"
          fi
        done
        
        # Generate badge URLs with authentication for private repo
        echo "Badge URLs (with auth token):" >> badges/README.md
        echo "Note: Replace TOKEN with a valid GitHub personal access token with repo read permissions" >> badges/README.md
        echo "" >> badges/README.md
        
        for suite in wallet financial user income quantify ads overall; do
          echo "![${suite}](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/badges/badges/${suite}.json?token=TOKEN)" >> badges/README.md
        done
        
        # Also create a public version using GitHub Pages approach
        echo "" >> badges/README.md
        echo "Alternative: Use GitHub Pages for public badge access" >> badges/README.md

    - name: Commit and push badges
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add badges/
        if git diff --staged --quiet; then
          echo "No changes to badges"
        else
          git commit -m "Update test badges - $(date -u +"%Y-%m-%d %H:%M UTC")"
          git push
        fi

  publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version bump
      id: version
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        # Determine version bump type based on conventional commits
        if [[ $COMMIT_MSG =~ ^feat(\(.+\))?!: ]] || [[ $COMMIT_MSG =~ BREAKING[[:space:]]CHANGE ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        elif [[ $COMMIT_MSG =~ ^fix(\(.+\))?: ]] || [[ $COMMIT_MSG =~ ^perf(\(.+\))?: ]]; then
          echo "bump=patch" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi

    - name: Bump version and create tag
      run: |
        npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
        git add package.json
        git commit -m "chore: bump version to v$NEW_VERSION"
        git tag "v$NEW_VERSION"

    - name: Publish to GitHub Packages
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push version tag
      run: |
        git push origin main
        git push origin $NEW_VERSION
