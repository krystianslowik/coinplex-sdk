name: CoinPlex SDK Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create .env file
      run: |
        echo "COINPLEX_API_KEY=${{ secrets.COINPLEX_API_KEY }}" >> .env
        echo "COINPLEX_API_SECRET=${{ secrets.COINPLEX_API_SECRET }}" >> .env
        echo "COINPLEX_PREFIX=${{ secrets.COINPLEX_PREFIX }}" >> .env
        echo "COINPLEX_ACCOUNT=${{ secrets.COINPLEX_ACCOUNT }}" >> .env
        echo "COINPLEX_CODE=${{ secrets.COINPLEX_CODE }}" >> .env

    - name: Run all tests with JSON output
      id: test
      run: |
        # Run tests and capture both JSON output and exit code
        npm test -- --json --outputFile=test-results.json || echo "tests_failed=true" >> $GITHUB_OUTPUT
        
        # Also run individual test suites for detailed badge data
        mkdir -p test-outputs
        
        echo "Running individual test suites..."
        
        # Test each suite individually and capture results
        for suite in wallet financial user income quantify ads; do
          echo "Testing $suite..."
          if npm test -- "tests/$suite.test.js" --json --outputFile="test-outputs/$suite.json"; then
            echo "${suite}_status=passed" >> $GITHUB_OUTPUT
          else
            echo "${suite}_status=failed" >> $GITHUB_OUTPUT
          fi
        done
      continue-on-error: true

    - name: Generate badge data
      run: |
        mkdir -p badge-data
        
        # Check if individual test results exist
        wallet_status="${{ steps.test.outputs.wallet_status }}"
        financial_status="${{ steps.test.outputs.financial_status }}"
        user_status="${{ steps.test.outputs.user_status }}"
        income_status="${{ steps.test.outputs.income_status }}"
        quantify_status="${{ steps.test.outputs.quantify_status }}"
        ads_status="${{ steps.test.outputs.ads_status }}"
        
        # Generate badges for each test suite
        for suite in wallet financial user income quantify ads; do
          # Get status for this suite
          case $suite in
            wallet) status="$wallet_status" ;;
            financial) status="$financial_status" ;;
            user) status="$user_status" ;;
            income) status="$income_status" ;;
            quantify) status="$quantify_status" ;;
            ads) status="$ads_status" ;;
          esac
          
          # Default to failed if empty
          if [ -z "$status" ]; then
            status="failed"
          fi
          
          if [ "$status" = "passed" ]; then
            color="green"
            message="passing"
          else
            color="red" 
            message="failing"
          fi
          
          echo "{\"schemaVersion\": 1, \"label\": \"$suite\", \"message\": \"$message\", \"color\": \"$color\"}" > "badge-data/$suite.json"
        done
        
        # Generate overall status badge
        passed_count=0
        total_count=6
        
        for status in "$wallet_status" "$financial_status" "$user_status" "$income_status" "$quantify_status" "$ads_status"; do
          if [ "$status" = "passed" ]; then
            passed_count=$((passed_count + 1))
          fi
        done
        
        if [ $passed_count -eq $total_count ]; then
          overall_color="green"
        elif [ $passed_count -gt 0 ]; then
          overall_color="yellow"
        else
          overall_color="red"
        fi
        
        overall_message="$passed_count/$total_count passing"
        
        echo "{\"schemaVersion\": 1, \"label\": \"tests\", \"message\": \"$overall_message\", \"color\": \"$overall_color\"}" > badge-data/overall.json

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.json
          test-outputs/
          badge-data/

  coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create .env file
      run: |
        echo "COINPLEX_API_KEY=${{ secrets.COINPLEX_API_KEY }}" >> .env
        echo "COINPLEX_API_SECRET=${{ secrets.COINPLEX_API_SECRET }}" >> .env
        echo "COINPLEX_PREFIX=${{ secrets.COINPLEX_PREFIX }}" >> .env
        echo "COINPLEX_ACCOUNT=${{ secrets.COINPLEX_ACCOUNT }}" >> .env
        echo "COINPLEX_CODE=${{ secrets.COINPLEX_CODE }}" >> .env

    - name: Run tests with coverage
      run: npm run test:coverage
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: coinplex-sdk-coverage
        fail_ci_if_error: false

  publish-badges:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    permissions:
      contents: write
      
    steps:
    - name: Checkout badges branch
      uses: actions/checkout@v4
      with:
        ref: badges
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create badges branch if it doesn't exist
      if: failure()
      run: |
        git checkout --orphan badges
        git rm -rf .
        mkdir -p badges
        echo "# Badges Branch" > README.md
        echo "This branch contains badge data for the CoinPlex SDK." >> README.md
        git add README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "Initialize badges branch"
        git push origin badges

    - name: Checkout badges branch (retry)
      if: failure()
      uses: actions/checkout@v4
      with:
        ref: badges
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download badge artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./artifacts

    - name: Update badge files
      run: |
        mkdir -p badges
        
        # Copy badge data files
        if [ -d "./artifacts/badge-data" ]; then
          cp ./artifacts/badge-data/*.json badges/
        fi
        
        # Ensure we have badge files (create defaults if missing)
        for suite in wallet financial user income quantify ads overall; do
          if [ ! -f "badges/$suite.json" ]; then
            echo "{\"schemaVersion\": 1, \"label\": \"$suite\", \"message\": \"unknown\", \"color\": \"lightgrey\"}" > "badges/$suite.json"
          fi
        done
        
        # Generate badge URLs with authentication for private repo
        echo "Badge URLs (with auth token):" >> badges/README.md
        echo "Note: Replace TOKEN with a valid GitHub personal access token with repo read permissions" >> badges/README.md
        echo "" >> badges/README.md
        
        for suite in wallet financial user income quantify ads overall; do
          echo "![${suite}](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/badges/badges/${suite}.json?token=TOKEN)" >> badges/README.md
        done
        
        # Also create a public version using GitHub Pages approach
        echo "" >> badges/README.md
        echo "Alternative: Use GitHub Pages for public badge access" >> badges/README.md

    - name: Commit and push badges
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add badges/
        if git diff --staged --quiet; then
          echo "No changes to badges"
        else
          git commit -m "Update test badges - $(date -u +"%Y-%m-%d %H:%M UTC")"
          git push
        fi

  notify:
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./results

    - name: Generate daily report
      id: report
      run: |
        echo "# CoinPlex SDK Daily Test Report - $(date)" >> report.md
        echo "" >> report.md
        echo "## Test Results Summary" >> report.md
        echo "" >> report.md
        
        overall_status="✅ PASSED"
        failed_tests=""
        
        for suite in wallet financial user income quantify ads; do
          if [ -f "results/badge-data/$suite.json" ]; then
            message=$(cat "results/badge-data/$suite.json" | grep -o '"message":"[^"]*"' | cut -d'"' -f4)
            if [[ "$message" == *"passed"* ]]; then
              echo "- ✅ **$suite**: PASSED" >> report.md
            else
              echo "- ❌ **$suite**: FAILED" >> report.md
              overall_status="❌ FAILED"
              failed_tests="$failed_tests $suite"
            fi
          else
            echo "- ⚠️ **$suite**: NO DATA" >> report.md
            overall_status="⚠️ PARTIAL"
            failed_tests="$failed_tests $suite"
          fi
        done
        
        echo "" >> report.md
        echo "## Overall Status: $overall_status" >> report.md
        echo "" >> report.md
        echo "**Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> report.md
        echo "**Repository**: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})" >> report.md
        echo "**Date**: $(date -u)" >> report.md
        
        if [ "$overall_status" != "✅ PASSED" ]; then
          echo "" >> report.md
          echo "## Failed Test Suites" >> report.md
          echo "" >> report.md
          echo "The following test suites need attention:$failed_tests" >> report.md
        fi
        
        cat report.md
        
        # Set output for issue creation
        echo "overall_status=$overall_status" >> $GITHUB_OUTPUT

    - name: Create Issue on Failure
      if: contains(steps.report.outputs.overall_status, 'FAILED') || contains(steps.report.outputs.overall_status, 'PARTIAL')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportContent = fs.readFileSync('report.md', 'utf8');
          
          const title = `Daily Test Failure - ${new Date().toISOString().split('T')[0]}`;
          
          // Check if there's already an open issue for today
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'automated-test-failure',
            per_page: 10
          });
          
          const today = new Date().toISOString().split('T')[0];
          const existingIssue = issues.data.find(issue => issue.title.includes(today));
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## Updated Test Results\n\n${reportContent}\n\n---\n*Updated: ${new Date().toISOString()}*`
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: reportContent,
              labels: ['bug', 'automated-test-failure', 'daily-monitoring']
            });
          }